@page "/login"
@using SpeedwayTyperApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation
@inject CustomAuthStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime

<div class="login-box">
    <div class="login-container">
        <h3>Zaloguj</h3>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="error-message">@_errorMessage</div>
        }
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <RadzenTextBox @bind-Value="loginModel.Username" Placeholder="Nazwa użytkownika" class="form-control" />
            </div>
            <div class="form-group">
                <RadzenPassword @bind-Value="loginModel.Password" Placeholder="Hasło" class="form-control" />
            </div>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Zaloguj" class="btn" />
        </EditForm>
        <div class="register-link">
            <a href="/register">Nie masz konta? Zarejestruj się z kodem zaproszenia.</a>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private string _errorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var response = await Http.PostAsJsonAsync("api/Auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (!string.IsNullOrWhiteSpace(result?.Token))
            {
                await AuthStateProvider.MarkUserAsAuthenticated(result.Token);
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authToken", result.Token);
                Navigation.NavigateTo("/");
            }
        }
        else
        {
            var message = await response.Content.ReadAsStringAsync();
            _errorMessage = string.IsNullOrWhiteSpace(message) ? "Nieprawidłowe dane logowania." : message;
        }
    }

    public class LoginResult
    {
        public string Token { get; set; }
    }
}

<style>
    .error-message {
        color: #dc3545;
        margin-bottom: 10px;
    }

    .register-link {
        margin-top: 15px;
        text-align: center;
    }

    .register-link a {
        color: #007bff;
        text-decoration: none;
    }

    .register-link a:hover {
        text-decoration: underline;
    }
</style>
